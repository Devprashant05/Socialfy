// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(cuid()) // Generate String unique id
  email String @unique // email of type string and unique
  username String @unique
  clerkId String @unique
  name String?  // name of type string and optional
  bio String?
  image String?
  location String?
  website String?
  createdAt DateTime @default(now()) // Member since 2024
  updatedAt DateTime @updatedAt // Auto generate when it is updated

  // Relations
  posts Post[] // One to many
  comments Comment[] // One to many
  likes Like[] // One to many

  followers Follows[] @relation("following") // user who follow this user
  following Follows[] @relation("follower") // users this user follows

  notifications Notification[] @relation("userNotifications")  // notifications received by user
  notificationsCreated Notification[] @relation("notificationCreator") // notifications created by user
}

model Post {
  id String @id @default(cuid())
  authorId String
  content String?
  image String?
  createdAt DateTime @default(now()) 
  updatedAt DateTime @updatedAt 
  // Relations
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade) // cascade delete means delete all the posts if author is deleted
  comments Comment[]
  likes Like[]
  notifications Notification[]
}

model Comment {
  id String @id @default(cuid())
  content String
  authorId String
  postId String
  createdAt DateTime @default(now()) 
  updatedAt DateTime @updatedAt 

  // Relations
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  notifications Notification[]

  @@index([authorId, postId]) // Composite Index for faster queries -  Speed up the query and give result based on author id and post id

}

model Like {
  id String @id @default(cuid())
  postId String
  userId String
  createdAt DateTime @default(now()) 

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([userId, postId])
  @@unique([userId, postId]) // this prevents same user liking twice
}

model Follows {
  follwerId String
  followingId String
  createdAt DateTime @default(now()) 

  // Relations
  follower User @relation("follower",  fields: [follwerId], references: [id], onDelete: Cascade)
  following User @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@index([follwerId, followingId])
  @@id([follwerId, followingId]) // composite primary key that prevents duplicate follows

}

model Notification {
  id String @id @default(cuid())
  userId String
  creatorId String
  type NotificationType
  read Boolean @default(false)
  postId String?
  commentId String?
  createdAt DateTime @default(now())

  // Relations
  user User @relation("userNotifications", fields: [userId], references: [id], onDelete: Cascade)
  creator User @relation("notificationCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  post Post? @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

enum NotificationType {
  LIKE 
  COMMENT 
  FOLLOW
}